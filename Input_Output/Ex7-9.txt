Implementation of isupper to save space and time

1)To save space  :-

int isupper( int c) // Function returns 1 when the passed argument lies in the range of A to Z else returns 0
{
	if( c >= 'A' && c <= 'Z' )
		return 1 ;
	else
		return 0 ;
}

This implementation saves space but consumes more time .

2) To save time :-

#define isupper(c) ((c >= 'A' && c <= 'Z') ? 1 : 0 )

This implementation saves time as there is no overhead of the function call and it uses more space because the
macro is expanded in every line every time it is invoked.

	Drawback -
		
		When the argument is evaluated twice. For example -
		char *p = "This is a string" ; // The macro expands to ((*p++ >= 'A' && *p++ <= 'Z')?1:0) which causes problems
		
		Possible solutions:-
		
		a) By making use of GNU extensions -
		(i) By making use of typeof		
			#define isupper(c) 						/
			({										/
				typeof(c) c_ = (c) ;				/
				(c_ >= 'A' && c_ <= 'Z') ? 1:0 ;	/
			})
	
		(ii) By making use of __auto_type
		In GNU C, but not GNU C++, you may also declare the type of a variable as __auto_type. In that case, the declaration must declare only one variable,
		whose declarator must just be an identifier, the declaration must be initialized, and the type of the variable is determined by the initializer; 
		the name of the variable is not in scope until after the initializer. (In C++, you should use C++11 auto for this purpose.)	
			Advantages over typeof is :-
			(a) Each argument to macro appears only once in the expansion of the macro. This prevents the size of the macro expansion growing exponentially
			    when calls to such macros are nested inside arguments of such macros .
			(b) If argument to the macro has variably modified type , it is evaluated only once when using __auto_type but twice if typeof is used.
		    #define isupper(c)						/
			({										/
				__auto_type c_ = (c) ;				/
				(c_ >= 'A' && c_ <= 'Z') ? 1:0 ;	/
			})
				
		GNU Extensions used -
		(a) ({...}) denotes a compound statement which can be evaluated as an expression whose value would be equivalent to the last statement in
			the code block(called as statement expressions).(https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html#Statement-Exprs)
		(b) typeof (https://gcc.gnu.org/onlinedocs/gcc/Typeof.html)
		(c) __auto_type (for C only alternative to C++11 would be using auto)

		But this solution is compiler dependant and works only on gcc

		b) Compiler independant solution
		
		The only other solution is to store the value in a temporary variable and pass that as argument. Example -
		char c = *p++ ;
		isupper(c) ;
