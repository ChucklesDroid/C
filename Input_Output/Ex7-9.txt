Implementation of isupper to save space and time

1)To save space  :-

int isupper( int c) // Function returns 1 when the passed argument lies in the range of A to Z else returns 0
{
	if( c >= 'A' && c <= 'Z' )
		return 1 ;
	else
		return 0 ;
}

This implementation saves space but consumes more time .

2) To save time :-

#define isupper(c) ((c >= 'A' && c <= 'Z') ? 1 : 0 )

This implementation saves time as there is no overhead of the function call and it uses more space because the
macro is expanded in every line every time it is invoked.

	Drawback -
		
		When the argument is evaluated twice. For example -
		char *p = "This is a string" ; // The macro expands to ((*p++ >= 'A' && *p++ <= 'Z')?1:0) which causes problems
		
		Possible solutions:-
		
		a) By making use of GNU extensions -
			
		#define isupper(c) 				/
		({						/
			typeof(c) = c_ ;			/
			(c_ >= 'A' && c_ <= 'Z') ? 1:0 ;	/
		})

		But this solution is compiler dependant and works only on gcc

		b) Compiler independant solution
		
		The only other solution is to store the value in a temporary variable and pass that as argument. Example -
		char c = *p++ ;
		isupper(c) ;
